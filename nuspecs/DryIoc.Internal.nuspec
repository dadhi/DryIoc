<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
    <metadata minClientVersion="3.3.0">
        <id>DryIoc.Internal</id>
        <version>4.1.0</version>
        <authors>Maksim Volkau</authors>
        <copyright>Copyright Â© 2013-2020 Maksim Volkau</copyright>
        <projectUrl>https://github.com/dadhi/DryIoc</projectUrl>
        <license type="expression">MIT</license>
        <iconUrl>https://github.com/dadhi/DryIoc/blob/master/logo/logo128.png</iconUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>DryIoc is fast, small, full-featured IoC Container for .NET</description>
        <tags>IoC Container Inversion-of-Control DI Dependency-Injection DRY Service-Provider Factory</tags>
        <releaseNotes>
<![CDATA[
## v4.1.0 Feature release

### Highlights

- Better memory use and massively improved performance for the real-world applications - big object graphs and the unit-of-work scenarios. See the updated benchmark results in [readme.md].(https://github.com/dadhi/DryIoc/blob/master/README.md#creating-the-container-registering-the-services-then-opening-a-scope-and-resolving-the-scoped-service-eg-controller-for-the-first-time))
- Improve parallelism / reduce thread blocking #137
- Full and fast DryIoc own Interpretation support via `Rules.WithUseInterpretation()` - useful for iOS and other platforms without compilation support #90
- Copied DryIoc sample project from the MediatR but with DryIoc.Messages #117 

### Features

- Interpretation only option #90 
- Add RegisterDelegate with the list of dependencies to Inject and not to Resolve #147
- Lift restrictions for Scope disposal when using ambient ScopeContext #168 
- FactoryDelegate<T> wrapper support #191
- Add Rules.UseDecorateeReuseForDecorators #201

### Fixes

- Resolving a component for the second time throws #130
- Stackoverflow exception #139
- Xamarin Forms iOS: Operation is not supported on this platform. #156
- DryIoc 4.0.5 withoutFastExpressionCompiler deadlock issue #157
- Rules.WithDependencyDepthToSplitObjectGraph is not propagated through most of `Rules.With` methods #163
- Rules.WithDependencyDepthToSplitObjectGraph was not applied in some cases with Decorators in graph #164
- Made.Of() Parameters don't follow Reuse setting #179
- ThreadScopeContext not working in DryIoc.dll 4.1.0-preview-02? #183
- ReflectionTools methods unexpectedly return static constructors #184
- Container creates multiple instances if TryInterpret fails #188
- Open-generic implementation may be wrongly considered for service with many type args #190
- DryIOC new Transient Disposable #192
- Private and public Constructors in generic classes #196
- Fix documentation regarding implicitly injected scope as IDisposable #197
- Open generics resolve fails if there is a static constructor #198


## v4.0.7 Bug-fix release

- fixed: #173 Validate-Method throws System.TypeInitializationException : The type initializer for 'DryIoc.OpenGenericTypeKey' threw an exception.

## v4.0.6 Bug-fix release

- fixed: Wrong IContainer resolved #171 

## v4.0.5 Release notes

- fixed: #133 Validate method call hangs
- fixed: #134 with finding is th property is static in VB

## v4.0.4 Release notes

- fixed: #116: DryIoc Resolve with decorators goes wrong for parallel execution
- fixed: #119: v4.0.3 packages were targeting only .NET 4.5 and .NET Standard 2.0
- fixed: #120: V4.0.3 double dryioc break the build
- fixed: #121: FastExpressionCompiler.cs and Expression.cs code comment out in .NetFramework 4.7
- fixed: #124: Stackoverflow exception 4.0.3

## v4.0.3 Release notes

- fixed: #109: Cannot inject a struct using a Func wrapper
- fixed: #114: Resolve Action<T>

## v4.0.2 Release notes

- fixed: #100: ResolveMany with Meta does NOT work but collection with Meta does work

## v4.0.1 Release notes

- added: #95: Serializable ContainerException for supported targets
- fixed: #97: Resolving last registration from multiple default services bug
- fixed: #89: DryIoC.CommonServiceLocator.dll package out-of-date link

## v4.0.0 Release notes

### Highlights

- DryIoc.dll and all extensions are strongly-signed.
- Greatly improved performance and decreased memory allocations for bootstrapping and first-time resolution, as well as for the rest of operations. [The results](https://github.com/dadhi/DryIoc/issues/26#issuecomment-466460255) were measured on realistic mid-sized object graph with ~40 dependencies and mixed registration types.
- `IResolver` is directly implementing (`IServiceProvider`)[https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider?view=netframework-4.7.2] for supported platforms
- `UseInstance` is split into `RegisterInstance` and `Use` methods #78
- The docs now are generated from `.cs` files in _DryIoc.Docs_ project with up-to-date runnable examples using [CsToMd](https://github.com/dadhi/Cstomd) project.

### Features

- added: #4 Rule for Func and Lazy to be resolved even without requested service registered
- added: #8 Parity of registration methods between IContainer and IRegistrator (RegisterMapping and RegisterPlaceholder are available in IRegistrator)
- added: #9 RegisterMany should indicate if no registration was made
- added: #11 Resolution root bound dependency expression de-duplication
- added: #17 Rules.DefaultRegistrationServiceKey enhancement
- added: #20 Enhance error message with current container Rules info
- added: #32 Integrate MediatR like middleware directly to DryIoc #32
- added: #39 For troubleshooting purposes add ability to opt-out FastExpressionCompiler 
- Added: #45 Consider expression interpretation to speed-up first time resolution
- added: #78 Split UseInstance two roles into separate RegisterInstance and Use
- added: DryIoc IResolver now directly implements IServiceProvider - no need for BuildServiceProvider anymore
- added: DryIoc.Rules.Rules.MicrosoftDependencyInjectionRules - the set of rules for MS.DI available directly in DryIoc
- added: FactoryInfo.Of(MemberInfo factoryMember, object factoryInstance)
- added: Explicit Factory.RegistrationOrder and adapted its usage for open-generics
- added: IRegistrator.GetRegisteredFactories
- added: FactoryType to Registrator.RegisterMapping
- added: AsyncExecutionFlowScopeContext.Default member
- added: Support for FEC v2.0

### Fixes

- fixed: #6 Open generic singleton service registration that satisfies multiple interfaces
- fixed: #7 Context-based injection
- fixed: #16 AutoConcreteTypeResolution should not consider a primitive type
- fixed: #25 Decorator with serviceKey throws exception which gives invalid advice on how to fix the issue for the most common reason to use the servicekey
- fixed: #26 Speed Optimization for short living applications
- fixed: #27 DryIoc cold start performance
- fixed: #28 FastExpressionCompiler is not used in Net Standard 1.3, 2.0 packages and not used in .Net Core
- fixed: #29 Resolve caches object[] args values
- fixed: #33 Memory leak with ResolveManyBehavior.AzLazyEnumerable?
- fixed: #41 ErrorCode: RegisteredFactoryMethodResultTypesIsNotAssignableToImplementationType
- fixed: #46 Operation is not supported on this platform exception on Xamarin iOS
- fixed: #61 Rules.SelectLastRegisteredFactory() does not account for OpenGenerics
- fixed: #63 Func wrapper resolving #63
- fixed: #75 Scoped call to Resolve() with args seems to leak memory
- fixed: BB-593 Add auto-generated tag to PCL FEC
- fixed: BB-594 Conflicting type is not working in .NET Core 2.1
- fixed: BB-596 The problem was in non-public service type- fixed: RegisterMapping for open-generic service type
- fixed: Using facadeKey in CreateFacade
        ]]>
        </releaseNotes>
        <contentFiles>
            <files include="cs/**/*.*" buildAction="Compile" />
        </contentFiles>
    </metadata>
    <files>
        <file src="..\LICENSE.txt" />
        <file src="..\nuspecs\DryIoc.snk" />

        <!--net35-->
        <file src="..\src\DryIoc.Internal\Container.cs" target="content\net35\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="content\net35\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="content\net35\DryIoc" />

        <!--net40-->
        <file src="..\src\DryIoc.Internal\Container.cs" target="content\net40\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="content\net40\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="content\net40\DryIoc" />

        <!--net45-->
        <file src="..\src\DryIoc.Internal\Container.cs" target="content\net45\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="content\net45\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="content\net45\DryIoc" />
        <file src="..\src\DryIoc.Internal\Expression.cs" target="content\net45\DryIoc" />

        <!-- .netstandard 1.0 (based on PCL Profile259) -->
        <file src="..\src\DryIoc.Internal\Container.cs" target="contentFiles\cs\netstandard1.0\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="contentFiles\cs\netstandard1.0\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="contentFiles\cs\netstandard1.0\DryIoc" />

        <!-- .netstandard 1.3 (based on PCL Profile259 except for FEC) -->
        <file src="..\src\DryIoc.Internal\Container.cs" target="contentFiles\cs\netstandard1.3\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="contentFiles\cs\netstandard1.3\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="contentFiles\cs\netstandard1.3\DryIoc" />
        <file src="..\src\DryIoc.Internal\Expression.cs" target="contentFiles\cs\netstandard1.3\DryIoc" />

        <!-- .netstandard 2.0 (based on PCL Profile259 except for FEC) -->
        <file src="..\src\DryIoc.Internal\Container.cs" target="contentFiles\cs\netstandard2.0\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="contentFiles\cs\netstandard2.0\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="contentFiles\cs\netstandard2.0\DryIoc" />
        <file src="..\src\DryIoc.Internal\Expression.cs" target="contentFiles\cs\netstandard2.0\DryIoc" />

        <!-- PCL Profile328: .NET Portable Subset (.NET Framework 4, Silverlight 5, Windows 8, Windows Phone 8.1, Windows Phone Silverlight 8) -->
        <file src="..\src\DryIoc.Internal\Container.cs" target="content\portable-net4+sl5+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="content\portable-net4+sl5+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="content\portable-net4+sl5+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />

        <!-- PCL Profile259: .NET Portable Subset (.NET Framework 4.5, Windows 8, Windows Phone 8.1, Windows Phone Silverlight 8) -->
        <file src="..\src\DryIoc.Internal\Container.cs" target="content\portable-net45+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />
        <file src="..\src\DryIoc.Internal\ImTools.cs" target="content\portable-net45+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />
        <file src="..\src\DryIoc.Internal\FastExpressionCompiler.cs" target="content\portable-net45+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1\DryIoc" />

    </files>
</package>
