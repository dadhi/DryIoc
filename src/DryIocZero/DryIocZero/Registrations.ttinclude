<#
// TODO:
// 1. Fill-in method `GetContainerWithRegistrations` below with creation of DryIoc `Container` and registrations.
// 2. Specify the resolution roots via `SpecifyResolutionRoots` method, see example below.
// 3. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 4. Check the "Container.Generated.cs" for the generated results and issues.
//
// Note: 
// - When specifying assembly path, you may use $(SolutionDir), $(ProjectDir), $(Configuration) parameters.
//
#>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="ImTools" #>
<#// TODO: Insert assemblies and namespaces of your services to be registered in container #>
<#+
// TODO: Specify the container and registrations ...
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    // NOTE: `RegisterDelegate` and `UseInstance` are not supported because of runtime state usage. 
    // Instead you can use `RegisterPlaceholder` to fix object graph generation, then fill in
    // placeholder using run-time `DryIocZero.RegisterDelegate` and `DryIocZero.UseInstance`

    // TODO: Add registrations ...
    // container.Register<IMyService, MyService>();
    // container.RegisterMany(new[] { MyAssembly });

    return container;
}

// TODO: For each passed registration specify what resolution roots it provides, null if none
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    return reg.AsResolutionRoot ? reg.ToServiceInfo().One() : null;
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};

// TODO: Specify the namespace to go into using instead of qualify the type all the times, 
// You may generate the Container.Generated.cs first, then look what you want to move to using
string[] NamespaceUsings =
{
    //"Foo.Bar.Buzz",
};
#>