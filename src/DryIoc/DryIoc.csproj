<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks Condition="'$(DevMode)' == 'true'">net45;netstandard2.0;netstandard1.0</TargetFrameworks>
        <TargetFrameworks Condition="'$(DevMode)' != 'true'">net35;net40;net45;netstandard1.0;netstandard1.3;netstandard2.0;portable-net45+win8+wpa81+wp8;portable-net40+win8+wpa81+wp8+sl5</TargetFrameworks>
        <TargetFrameworks Condition="'$(LocalBuild)' == 'true'">net40;net45;netstandard1.0;netstandard1.3;netstandard2.0</TargetFrameworks>

        <Product>DryIoc</Product>
        <VersionPrefix>4.1.0</VersionPrefix>
        <VersionSuffix></VersionSuffix>

        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(AssemblyName) $(TargetFramework)</AssemblyTitle>

        <PackageId>$(Product).dll</PackageId>
        <Title>$(Product).dll</Title>
        <Description>DryIoc is fast, small, full-featured IoC Container for .NET</Description>
        <PackageTags>IoC Container Inversion-of-Control DI Dependency-Injection DRY Service-Provider Factory FastExpressionCompiler ImTools</PackageTags>
        <PackageReleaseNotes>
<![CDATA[
## v4.1.0 Feature release

### Highlights

- Better memory use and massively improved performance for the real-world applications - big object graphs and the unit-of-work scenarios. See the updated benchmark results in [readme.md].(https://github.com/dadhi/DryIoc/blob/master/README.md#creating-the-container-registering-the-services-then-opening-a-scope-and-resolving-the-scoped-service-eg-controller-for-the-first-time))
- Improve parallelism / reduce thread blocking #137
- Full and fast DryIoc own Interpretation support via `Rules.WithUseInterpretation()` - useful for iOS and other platforms without compilation support #90
- Add DryIocZero capabilities to the DryIoc source package #101
- Copied DryIoc sample project from the MediatR but with DryIoc.Messages #117 

### Features

- Interpretation only option #90 
- Add RegisterDelegate with the list of dependencies to Inject and not to Resolve #147
- Lift restrictions for Scope disposal when using ambient ScopeContext #168 
- FactoryDelegate<T> wrapper support #191
- Add Rules.UseDecorateeReuseForDecorators #201

### Fixes

- Resolving a component for the second time throws #130
- Stackoverflow exception #139
- Xamarin Forms iOS: Operation is not supported on this platform. #156
- DryIoc 4.0.5 withoutFastExpressionCompiler deadlock issue #157
- Rules.WithDependencyDepthToSplitObjectGraph is not propagated through most of `Rules.With` methods #163
- Rules.WithDependencyDepthToSplitObjectGraph was not applied in some cases with Decorators in graph #164
- Made.Of() Parameters don't follow Reuse setting #179
- ThreadScopeContext not working in DryIoc.dll 4.1.0-preview-02? #183
- ReflectionTools methods unexpectedly return static constructors #184
- Container creates multiple instances if TryInterpret fails #188
- Open-generic implementation may be wrongly considered for service with many type args #190
- DryIOC new Transient Disposable #192
- Private and public Constructors in generic classes #196
- Fix documentation regarding implicitly injected scope as IDisposable #197
- Open generics resolve fails if there is a static constructor #198
- 4.1.0 Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object. #205
- Avoid wasteful compilation of the same cached expression by multiple threads #208
]]>
    </PackageReleaseNotes>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
    </ItemGroup>

    <Import Project="DryIoc.props" />

    <ItemGroup>
        <None Include="DryIoc.props" />
    </ItemGroup>

    <ItemGroup>
      <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
    </ItemGroup>

    <ItemGroup>
      <Compile Update="Container.Generated.cs">
        <DesignTime>True</DesignTime>
        <AutoGen>True</AutoGen>
        <DependentUpon>Container.Generated.tt</DependentUpon>
      </Compile>
    </ItemGroup>

    <ItemGroup>
      <None Update="Container.Generated.tt">
        <Generator>TextTemplatingFileGenerator</Generator>
        <LastGenOutput>Container.Generated.cs</LastGenOutput>
      </None>
    </ItemGroup>

</Project>
